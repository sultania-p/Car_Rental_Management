/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.CarFleet;
import model.Car;
/**
 *
 * @author piyus
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    CarFleet carFleetDetails;
    public ViewJPanel(CarFleet carFleetDetails) {
        initComponents();
        
        this.carFleetDetails = carFleetDetails;
        
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblViewCarDetails = new javax.swing.JTable();
        btnViewCarDetails = new javax.swing.JButton();
        btnDeleteCarDetails = new javax.swing.JButton();
        btnAllAvailableCars = new javax.swing.JButton();
        btnFirstAvailableCar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jPanel2 = new javax.swing.JPanel();
        lblUsedByApp = new javax.swing.JLabel();
        comboBoxUsedByApp = new javax.swing.JComboBox<>();
        lblLastUpdatedValue = new javax.swing.JLabel();
        txtLastUpdatedValue = new javax.swing.JTextField();
        btnExpiredMaintCert = new javax.swing.JButton();
        lblCarManufacturer = new javax.swing.JLabel();
        txtSeatCapacity = new javax.swing.JTextField();
        txtLastUpdated = new javax.swing.JTextField();
        lblLastUpdated = new javax.swing.JLabel();
        txtModelNum = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblManufacturedDate = new javax.swing.JLabel();
        txtSerialNum = new javax.swing.JTextField();
        chkboxAvailable = new java.awt.Checkbox();
        txtUsedBy = new javax.swing.JTextField();
        lblCarModelNum = new javax.swing.JLabel();
        txtManufacturer = new javax.swing.JTextField();
        lblSeatCapacity = new javax.swing.JLabel();
        lblCarSerialNum = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        txtManufacturedDate = new javax.swing.JTextField();
        lblUsedBy = new javax.swing.JLabel();
        lblManufacturerFilter = new javax.swing.JLabel();
        comboBoxCarManufacturer = new javax.swing.JComboBox<>();
        btnUpdateView = new javax.swing.JButton();
        txtCountUnAvlCars = new javax.swing.JTextField();
        txtCountAvlCars = new javax.swing.JTextField();
        btnCarAvailabilityStatus = new javax.swing.JButton();
        lblCountUnAvlCars = new javax.swing.JLabel();
        lblCountAvlCars = new javax.swing.JLabel();
        txtManufacturedDateFilter = new javax.swing.JTextField();
        btnManufacturedDateFilter = new javax.swing.JButton();
        lblMinSeat = new javax.swing.JLabel();
        comboBoxMaximumCapacity = new javax.swing.JComboBox<>();
        lblManufacturedYearFilter1 = new javax.swing.JLabel();
        comboBoxMinCapacity = new javax.swing.JComboBox<>();
        lblMaxSeat = new javax.swing.JLabel();
        btnModelNumberFilter = new javax.swing.JButton();
        txtModelNumberFilter = new javax.swing.JTextField();
        btnCityFilter = new javax.swing.JButton();
        txtCityFilter = new javax.swing.JTextField();
        txtSerialNumberFilter = new javax.swing.JTextField();
        btnSerialNumberFilter = new javax.swing.JButton();
        lblMaintenanceCertExpDate = new javax.swing.JLabel();
        txtMaintenanceCertExpDate = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Car");

        tblViewCarDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Model Number", "Serial Number", "Manufacturer", "Manufactured Date", "Seat Capacity", "Is Available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblViewCarDetails);

        btnViewCarDetails.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnViewCarDetails.setText("View");
        btnViewCarDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCarDetailsActionPerformed(evt);
            }
        });

        btnDeleteCarDetails.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnDeleteCarDetails.setText("Delete");
        btnDeleteCarDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCarDetailsActionPerformed(evt);
            }
        });

        btnAllAvailableCars.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnAllAvailableCars.setText("All Available Cars");
        btnAllAvailableCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllAvailableCarsActionPerformed(evt);
            }
        });

        btnFirstAvailableCar.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnFirstAvailableCar.setText("First Available Car");
        btnFirstAvailableCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstAvailableCarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1015, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 624, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 97, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 61, Short.MAX_VALUE)
        );

        lblUsedByApp.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblUsedByApp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsedByApp.setText("Used By App");
        lblUsedByApp.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(102, 102, 102)));

        comboBoxUsedByApp.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        comboBoxUsedByApp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Uber", "Lyft", "Ola", "All" }));
        comboBoxUsedByApp.setSelectedIndex(-1);
        comboBoxUsedByApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxUsedByAppActionPerformed(evt);
            }
        });

        lblLastUpdatedValue.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblLastUpdatedValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLastUpdatedValue.setText("Last Updated On");
        lblLastUpdatedValue.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(102, 102, 102)));

        txtLastUpdatedValue.setBackground(new java.awt.Color(204, 204, 204));
        txtLastUpdatedValue.setText("                   ");
        txtLastUpdatedValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastUpdatedValueActionPerformed(evt);
            }
        });

        btnExpiredMaintCert.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnExpiredMaintCert.setText("List Expired Certificate");
        btnExpiredMaintCert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpiredMaintCertActionPerformed(evt);
            }
        });

        lblCarManufacturer.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblCarManufacturer.setText("Manufacturer:");

        lblLastUpdated.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblLastUpdated.setText("Last Updated On:");

        txtModelNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNumActionPerformed(evt);
            }
        });

        lblCity.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblCity.setText("City Of Operation:");

        jLabel2.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        jLabel2.setText("Car Availability:");

        lblManufacturedDate.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblManufacturedDate.setText("Manufactured Date:");

        chkboxAvailable.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        chkboxAvailable.setLabel("Is Available");

        lblCarModelNum.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblCarModelNum.setText("Model Number:");

        lblSeatCapacity.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblSeatCapacity.setText("Seat Capacity:");

        lblCarSerialNum.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblCarSerialNum.setText("Serial Number:");

        lblUsedBy.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblUsedBy.setText("Platform Used:");

        lblManufacturerFilter.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblManufacturerFilter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblManufacturerFilter.setText("Manufactured By");
        lblManufacturerFilter.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(102, 102, 102)));

        comboBoxCarManufacturer.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        comboBoxCarManufacturer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Honda", "BMW", "Audi", "Tesla", "Suzuki", "Toyota", "All" }));
        comboBoxCarManufacturer.setSelectedIndex(-1);
        comboBoxCarManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCarManufacturerActionPerformed(evt);
            }
        });

        btnUpdateView.setBackground(new java.awt.Color(51, 51, 51));
        btnUpdateView.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnUpdateView.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateView.setText("Update Car");

        txtCountUnAvlCars.setText("0");

        txtCountAvlCars.setText("0");

        btnCarAvailabilityStatus.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnCarAvailabilityStatus.setText("Car Availability Status");
        btnCarAvailabilityStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarAvailabilityStatusActionPerformed(evt);
            }
        });

        lblCountUnAvlCars.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblCountUnAvlCars.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCountUnAvlCars.setText("Engaged Car Count:");

        lblCountAvlCars.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblCountAvlCars.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCountAvlCars.setText("Available Car Count:");

        btnManufacturedDateFilter.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnManufacturedDateFilter.setText("Filter Manufactured Year");
        btnManufacturedDateFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManufacturedDateFilterActionPerformed(evt);
            }
        });

        lblMinSeat.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblMinSeat.setText("Min Seat:");

        comboBoxMaximumCapacity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10", "11" }));
        comboBoxMaximumCapacity.setSelectedIndex(9);
        comboBoxMaximumCapacity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMaximumCapacityActionPerformed(evt);
            }
        });

        lblManufacturedYearFilter1.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblManufacturedYearFilter1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblManufacturedYearFilter1.setText("Seat Capacity");
        lblManufacturedYearFilter1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(102, 102, 102)));

        comboBoxMinCapacity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        comboBoxMinCapacity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMinCapacityActionPerformed(evt);
            }
        });

        lblMaxSeat.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblMaxSeat.setText("Max Seat:");

        btnModelNumberFilter.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnModelNumberFilter.setText("Filter Model Number");
        btnModelNumberFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelNumberFilterActionPerformed(evt);
            }
        });

        btnCityFilter.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnCityFilter.setText("Filter City");
        btnCityFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityFilterActionPerformed(evt);
            }
        });

        btnSerialNumberFilter.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnSerialNumberFilter.setText("Filter Serial Number");
        btnSerialNumberFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialNumberFilterActionPerformed(evt);
            }
        });

        lblMaintenanceCertExpDate.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblMaintenanceCertExpDate.setText("Maintenance Certificate Expiry Date:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1457, 1457, 1457)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblLastUpdatedValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnFirstAvailableCar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAllAvailableCars, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnViewCarDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblManufacturerFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblUsedByApp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(txtLastUpdatedValue, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(64, 64, 64)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lblCarModelNum)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(lblCarManufacturer)
                                                            .addComponent(lblCarSerialNum)
                                                            .addComponent(lblSeatCapacity))))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(comboBoxUsedByApp, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addGap(41, 41, 41)
                                                    .addComponent(lblManufacturedDate))
                                                .addComponent(lblCity, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblUsedBy, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblLastUpdated, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                            .addComponent(comboBoxCarManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblMaintenanceCertExpDate, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(51, 51, 51)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtModelNum, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSerialNum, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                                            .addComponent(txtManufacturer)
                                            .addComponent(txtManufacturedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtLastUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(chkboxAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSeatCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtUsedBy, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtMaintenanceCertExpDate, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDeleteCarDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(137, 137, 137)
                                        .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(104, 104, 104)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnCarAvailabilityStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnManufacturedDateFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnExpiredMaintCert, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(lblCountUnAvlCars, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblCountAvlCars, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtCountAvlCars, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtCountUnAvlCars, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(txtManufacturedDateFilter))))
                                    .addComponent(btnUpdateView, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnCityFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnModelNumberFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                            .addComponent(btnSerialNumberFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblManufacturedYearFilter1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblMaxSeat)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addGap(4, 4, 4)
                                                        .addComponent(lblMinSeat)))
                                                .addGap(26, 26, 26)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(comboBoxMinCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(comboBoxMaximumCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtModelNumberFilter)
                                                .addComponent(txtCityFilter)
                                                .addComponent(txtSerialNumberFilter))))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(341, 341, 341)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 692, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCity, txtLastUpdated, txtMaintenanceCertExpDate, txtManufacturedDate, txtManufacturer, txtModelNum, txtSeatCapacity, txtSerialNum, txtUsedBy});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnViewCarDetails)
                        .addComponent(btnDeleteCarDetails))
                    .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCarAvailabilityStatus)
                            .addComponent(lblCountAvlCars)
                            .addComponent(txtCountAvlCars, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCountUnAvlCars)
                            .addComponent(txtCountUnAvlCars, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnManufacturedDateFilter)
                            .addComponent(txtManufacturedDateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnExpiredMaintCert)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnModelNumberFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtModelNumberFilter))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCityFilter)
                            .addComponent(txtCityFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSerialNumberFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSerialNumberFilter))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblManufacturedYearFilter1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMinSeat)
                            .addComponent(comboBoxMinCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaxSeat)
                            .addComponent(comboBoxMaximumCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnFirstAvailableCar)
                                .addGap(18, 18, 18)
                                .addComponent(btnAllAvailableCars)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblLastUpdatedValue)
                                    .addComponent(txtLastUpdatedValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblManufacturerFilter)
                                    .addComponent(comboBoxCarManufacturer))
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(comboBoxUsedByApp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblUsedByApp))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCarModelNum)
                                    .addComponent(txtModelNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCarSerialNum)
                                    .addComponent(txtSerialNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCarManufacturer)
                                    .addComponent(txtManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblSeatCapacity)
                                    .addComponent(txtSeatCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtManufacturedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblManufacturedDate))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCity)
                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUsedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUsedBy))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLastUpdated)
                            .addComponent(txtLastUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(chkboxAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaintenanceCertExpDate)
                            .addComponent(txtMaintenanceCertExpDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdateView))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(981, 981, 981))
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtCity, txtLastUpdated, txtMaintenanceCertExpDate, txtManufacturedDate, txtManufacturer, txtModelNum, txtSeatCapacity, txtSerialNum, txtUsedBy});

    }// </editor-fold>//GEN-END:initComponents

    private void txtModelNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNumActionPerformed

    private void btnDeleteCarDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCarDetailsActionPerformed
        int selectedRowIndex = tblViewCarDetails.getSelectedRow();
        
        if(selectedRowIndex < 0) {  
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        Car selectedCar = (Car) model.getValueAt(selectedRowIndex, 0);
        
        carFleetDetails.removeCar(selectedCar);
        JOptionPane.showMessageDialog(this, "Car record deleted successfully!");
        
        populateTable();
    }//GEN-LAST:event_btnDeleteCarDetailsActionPerformed

    private void btnViewCarDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCarDetailsActionPerformed
        int selectedRowIndex = tblViewCarDetails.getSelectedRow();
        
        if(selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        Car selectedCar = (Car) model.getValueAt(selectedRowIndex, 0);
        
        txtModelNum.setText(String.valueOf(selectedCar.getModelNumber()));
        txtSerialNum.setText(String.valueOf(selectedCar.getSerialNumber()));
        txtManufacturer.setText(selectedCar.getManufacturer());
        txtManufacturedDate.setText(String.valueOf(selectedCar.getManufacturedDate()));
        txtSeatCapacity.setText(String.valueOf(selectedCar.getSeatCapacity()));
        txtUsedBy.setText(selectedCar.getUsedByApp());
        txtCity.setText(selectedCar.getCity());
        txtMaintenanceCertExpDate.setText(String.valueOf(selectedCar.getMaintenanceCertExpDate()));
        txtLastUpdated.setText(String.valueOf(selectedCar.getLastUpdated()));
        chkboxAvailable.setState(selectedCar.isIsAvailable());
    }//GEN-LAST:event_btnViewCarDetailsActionPerformed

    private void btnAllAvailableCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllAvailableCarsActionPerformed

        String isAvailable = "true";
        populateTableAvailable(isAvailable);
        
    }//GEN-LAST:event_btnAllAvailableCarsActionPerformed

    private void comboBoxCarManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCarManufacturerActionPerformed
        populateTable();
    }//GEN-LAST:event_comboBoxCarManufacturerActionPerformed

    private void btnFirstAvailableCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstAvailableCarActionPerformed
        String isAvailable = "true";
        populateTableFirstAvailable();
    }//GEN-LAST:event_btnFirstAvailableCarActionPerformed

    private void btnCarAvailabilityStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarAvailabilityStatusActionPerformed
        int totalCarAvl = 0;
        int countCarAvl = 0;
        int countUnAvlCar = 0;
        for(Car c: carFleetDetails.getCarFleetDetails()) {
                totalCarAvl++;    
            if (c.isIsAvailable() == true) {
                countCarAvl++;
            }
        }
        countUnAvlCar = totalCarAvl - countCarAvl;
        txtCountAvlCars.setText(String.valueOf(countCarAvl));
        txtCountUnAvlCars.setText(String.valueOf(countUnAvlCar));
    }//GEN-LAST:event_btnCarAvailabilityStatusActionPerformed

    private void btnManufacturedDateFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManufacturedDateFilterActionPerformed

        populateTableManufacturedYear();
    }//GEN-LAST:event_btnManufacturedDateFilterActionPerformed

    private void comboBoxMinCapacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMinCapacityActionPerformed

        Object countMinCapacity = comboBoxMinCapacity.getSelectedItem();
        int countMinCapacityInt = Integer.parseInt(countMinCapacity.toString());
        comboBoxMaximumCapacity.removeAllItems();
        for (int i=countMinCapacityInt; i<=10 ; i++) {
            String newcountMinCapacityInt = String.valueOf(i + 1);
            comboBoxMaximumCapacity.addItem(newcountMinCapacityInt);
        }
        populateSeatCapacityFilterTable();
    }//GEN-LAST:event_comboBoxMinCapacityActionPerformed

    private void comboBoxMaximumCapacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMaximumCapacityActionPerformed

        populateSeatCapacityFilterTable();
    }//GEN-LAST:event_comboBoxMaximumCapacityActionPerformed

    private void btnSerialNumberFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialNumberFilterActionPerformed
        populateTableSerialNumberFilter();
    }//GEN-LAST:event_btnSerialNumberFilterActionPerformed

    private void btnModelNumberFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelNumberFilterActionPerformed
        populateTableModelNumberFilter();
    }//GEN-LAST:event_btnModelNumberFilterActionPerformed

    private void comboBoxUsedByAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxUsedByAppActionPerformed
        populateTableUsedByApp();
    }//GEN-LAST:event_comboBoxUsedByAppActionPerformed

    private void txtLastUpdatedValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastUpdatedValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastUpdatedValueActionPerformed

    private void btnCityFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityFilterActionPerformed
        populateTableCityFilter();
    }//GEN-LAST:event_btnCityFilterActionPerformed

    private void btnExpiredMaintCertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpiredMaintCertActionPerformed
        populateTableExpiredCertFilter();
    }//GEN-LAST:event_btnExpiredMaintCertActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllAvailableCars;
    private javax.swing.JButton btnCarAvailabilityStatus;
    private javax.swing.JButton btnCityFilter;
    private javax.swing.JButton btnDeleteCarDetails;
    private javax.swing.JButton btnExpiredMaintCert;
    private javax.swing.JButton btnFirstAvailableCar;
    private javax.swing.JButton btnManufacturedDateFilter;
    private javax.swing.JButton btnModelNumberFilter;
    private javax.swing.JButton btnSerialNumberFilter;
    private javax.swing.JButton btnUpdateView;
    private javax.swing.JButton btnViewCarDetails;
    private java.awt.Checkbox chkboxAvailable;
    private javax.swing.JComboBox<String> comboBoxCarManufacturer;
    private javax.swing.JComboBox<String> comboBoxMaximumCapacity;
    private javax.swing.JComboBox<String> comboBoxMinCapacity;
    private javax.swing.JComboBox<String> comboBoxUsedByApp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCarManufacturer;
    private javax.swing.JLabel lblCarModelNum;
    private javax.swing.JLabel lblCarSerialNum;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCountAvlCars;
    private javax.swing.JLabel lblCountUnAvlCars;
    private javax.swing.JLabel lblLastUpdated;
    private javax.swing.JLabel lblLastUpdatedValue;
    private javax.swing.JLabel lblMaintenanceCertExpDate;
    private javax.swing.JLabel lblManufacturedDate;
    private javax.swing.JLabel lblManufacturedYearFilter1;
    private javax.swing.JLabel lblManufacturerFilter;
    private javax.swing.JLabel lblMaxSeat;
    private javax.swing.JLabel lblMinSeat;
    private javax.swing.JLabel lblSeatCapacity;
    private javax.swing.JLabel lblUsedBy;
    private javax.swing.JLabel lblUsedByApp;
    private javax.swing.JTable tblViewCarDetails;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCityFilter;
    private javax.swing.JTextField txtCountAvlCars;
    private javax.swing.JTextField txtCountUnAvlCars;
    private javax.swing.JTextField txtLastUpdated;
    private javax.swing.JTextField txtLastUpdatedValue;
    private javax.swing.JTextField txtMaintenanceCertExpDate;
    private javax.swing.JTextField txtManufacturedDate;
    private javax.swing.JTextField txtManufacturedDateFilter;
    private javax.swing.JTextField txtManufacturer;
    private javax.swing.JTextField txtModelNum;
    private javax.swing.JTextField txtModelNumberFilter;
    private javax.swing.JTextField txtSeatCapacity;
    private javax.swing.JTextField txtSerialNum;
    private javax.swing.JTextField txtSerialNumberFilter;
    private javax.swing.JTextField txtUsedBy;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        
        Object selectedManufacturer = comboBoxCarManufacturer.getSelectedItem();
        ArrayList<LocalDate> allUpdates = new ArrayList<LocalDate>();
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            if (selectedManufacturer != null && selectedManufacturer.equals(c.getManufacturer())) {
            Object [] row = new Object[6];
            row[0] = c;
            row[1] = c.getSerialNumber();
            row[2] = c.getManufacturer();
            row[3] = c.getManufacturedDate();
            row[4] = c.getSeatCapacity();
            row[5] = c.isIsAvailable();
            
            model.addRow(row); 
            } else if(selectedManufacturer == null || selectedManufacturer == "All") {
                Object [] row = new Object[6];
            row[0] = c;
            row[1] = c.getSerialNumber();
            row[2] = c.getManufacturer();
            row[3] = c.getManufacturedDate();
            row[4] = c.getSeatCapacity();
            row[5] = c.isIsAvailable();
            
            model.addRow(row); 
            }
        }
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            allUpdates.add(c.getLastUpdated());
        }
        
        if (!allUpdates.isEmpty()) {
            System.out.println("inside");
                   LocalDate maxDate = allUpdates.get(0); 

        for (int i = 1; i < allUpdates.size()-1; i++) { 
                if (allUpdates.get(i).isAfter(maxDate)) { 
                        maxDate = allUpdates.get(i); 
                } 
        }
        txtLastUpdatedValue.setText(String.valueOf(maxDate)); 
        }
        
    }
    
    private void populateTableUsedByApp() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        
        Object selectedUsedByApp = comboBoxUsedByApp.getSelectedItem();
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            if (selectedUsedByApp != null && selectedUsedByApp.equals(c.getUsedByApp())) {
            Object [] row = new Object[6];
            row[0] = c;
            row[1] = c.getSerialNumber();
            row[2] = c.getManufacturer();
            row[3] = c.getManufacturedDate();
            row[4] = c.getSeatCapacity();
            row[5] = c.isIsAvailable();
            
            model.addRow(row); 
            } else if(selectedUsedByApp == null || selectedUsedByApp == "All") {
                Object [] row = new Object[6];
            row[0] = c;
            row[1] = c.getSerialNumber();
            row[2] = c.getManufacturer();
            row[3] = c.getManufacturedDate();
            row[4] = c.getSeatCapacity();
            row[5] = c.isIsAvailable();
            
            model.addRow(row); 
            }
        }
        
    }
    
    private void populateTableAvailable(String isAvailable) {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            
            if(c.isIsAvailable() == true) {
                Object [] row = new Object[6];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();

                model.addRow(row);
            }
        }
        
    }
    
    private void populateTableFirstAvailable() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            
            if(c.isIsAvailable() == true) {
                Object [] row = new Object[6];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();
                
                if (model.getRowCount() == 0) {
                    model.addRow(row);
                }
            }
        }
        
    }

    private void populateTableManufacturedYear() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        int manufacturedYear = Integer.parseInt(txtManufacturedDateFilter.getText());
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            int manuYear = c.getManufacturedDate().getYear();
            
            if(manuYear == manufacturedYear) {
                Object [] row = new Object[6];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();

                model.addRow(row);
            }
        }
    }

    private void populateSeatCapacityFilterTable() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        
        Object selectedMinCapacity = comboBoxMinCapacity.getSelectedItem();
        Object selectedMaxCapacity = comboBoxMaximumCapacity.getSelectedItem();
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            int countMinCapacityInt = Integer.parseInt(selectedMinCapacity.toString());
            int countMaxCapacityInt = 11;
            if(comboBoxMaximumCapacity.getSelectedItem() != null) {
               countMaxCapacityInt = Integer.parseInt(selectedMaxCapacity.toString()); 
            }
            if (c.getSeatCapacity() <= countMaxCapacityInt && c.getSeatCapacity() >= countMinCapacityInt) {
            Object [] row = new Object[6];
            row[0] = c;
            row[1] = c.getSerialNumber();
            row[2] = c.getManufacturer();
            row[3] = c.getManufacturedDate();
            row[4] = c.getSeatCapacity();
            row[5] = c.isIsAvailable();
            
            model.addRow(row); 
            } 
        }
        
    }

    private void populateTableSerialNumberFilter() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        int serialNumber = Integer.parseInt(txtSerialNumberFilter.getText());
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            int seriNum = c.getSerialNumber();
            
            if(seriNum == serialNumber) {
                Object [] row = new Object[6];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();

                model.addRow(row);
            }
        }
    }
    
    private void populateTableModelNumberFilter() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        int modelNumber = Integer.parseInt(txtModelNumberFilter.getText());
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            int modelNum = c.getModelNumber();
            
            if(modelNum == modelNumber) {
                Object [] row = new Object[6];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();

                model.addRow(row);
            }
        }
    }

    private void populateTableCityFilter() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        String typeCity = txtCityFilter.getText();
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            String city = c.getCity();
            
            if(city == typeCity) {
                Object [] row = new Object[6];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();

                model.addRow(row);
            }
        }
    }

    private void populateTableExpiredCertFilter() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        LocalDate lt = LocalDate.now();
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            LocalDate expiry = c.getMaintenanceCertExpDate();
            
            if(expiry.isBefore(lt)) {
                Object [] row = new Object[6];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();

                model.addRow(row);
            }
        }
    }
}
