/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.CarFleet;
import model.Car;
/**
 *
 * @author piyus
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    CarFleet carFleetDetails;
    public ViewJPanel(CarFleet carFleetDetails) {
        initComponents();
        
        this.carFleetDetails = carFleetDetails;
        
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblViewCarDetails = new javax.swing.JTable();
        btnViewCar = new javax.swing.JButton();
        btnDeleteCar = new javax.swing.JButton();
        btnAllAvailableCars = new javax.swing.JButton();
        btnFirstAvailableCar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        btnUpdateView = new javax.swing.JButton();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jPanel2 = new javax.swing.JPanel();
        lblPlatformUsedFilter = new javax.swing.JLabel();
        comboBoxPlatformUsed = new javax.swing.JComboBox<>();
        lblLastUpdatedValue = new javax.swing.JLabel();
        txtLastUpdatedValue = new javax.swing.JTextField();
        btnCarExpiredCertificateFilter = new javax.swing.JButton();
        lblManufacturedBy = new javax.swing.JLabel();
        txtSeatCapacity = new javax.swing.JTextField();
        txtLastUpdated = new javax.swing.JTextField();
        lblLastUpdatedDate = new javax.swing.JLabel();
        txtModelNumber = new javax.swing.JTextField();
        lblCityOfOperation = new javax.swing.JLabel();
        lblCarAvailability = new javax.swing.JLabel();
        lblManufacturedDate = new javax.swing.JLabel();
        txtSerialNumber = new javax.swing.JTextField();
        chkboxAvailable = new java.awt.Checkbox();
        txtPlatformUsed = new javax.swing.JTextField();
        lblModelNumber = new javax.swing.JLabel();
        txtManufacturedBy = new javax.swing.JTextField();
        lblSeatCapacity = new javax.swing.JLabel();
        lblSerialNumber = new javax.swing.JLabel();
        txtCityOfOperation = new javax.swing.JTextField();
        txtManufacturedDate = new javax.swing.JTextField();
        lblPlatformUsed = new javax.swing.JLabel();
        lblManufacturedByFilter = new javax.swing.JLabel();
        comboBoxManufacturedBy = new javax.swing.JComboBox<>();
        txtUnavailableCarCount = new javax.swing.JTextField();
        txtAvailableCarCount = new javax.swing.JTextField();
        btnCarAvailability = new javax.swing.JButton();
        lblEngagedCarCount = new javax.swing.JLabel();
        lblAvailableCarCount = new javax.swing.JLabel();
        txtManufacturedYearSearch = new javax.swing.JTextField();
        btnManufacturedYearSearch = new javax.swing.JButton();
        lblMinimumSeatSelection = new javax.swing.JLabel();
        comboBoxMaximumSeatCapacity = new javax.swing.JComboBox<>();
        lblSeatCapacityFilter = new javax.swing.JLabel();
        comboBoxMinimumSeatCapacity = new javax.swing.JComboBox<>();
        lblMaximumSeatSelection = new javax.swing.JLabel();
        btnModelNumberSearch = new javax.swing.JButton();
        txtModelNumberSearch = new javax.swing.JTextField();
        btnCitySearch = new javax.swing.JButton();
        txtCityOfOperationSearch = new javax.swing.JTextField();
        txtSerialNumberSearch = new javax.swing.JTextField();
        btnSerialNumberSearch = new javax.swing.JButton();
        lblMaintenanceCertExpDate = new javax.swing.JLabel();
        txtMaintenanceCertExpDate = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Car");

        tblViewCarDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Model Number", "Serial Number", "Manufacturer", "Manufactured Date", "Seat Capacity", "Is Available", "City", "Platform Used", "Maintenance Certificate Expiry Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblViewCarDetails);

        btnViewCar.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnViewCar.setText("View Car");
        btnViewCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCarActionPerformed(evt);
            }
        });

        btnDeleteCar.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnDeleteCar.setText("Delete Car");
        btnDeleteCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCarActionPerformed(evt);
            }
        });

        btnAllAvailableCars.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnAllAvailableCars.setText("All Available Cars");
        btnAllAvailableCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllAvailableCarsActionPerformed(evt);
            }
        });

        btnFirstAvailableCar.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnFirstAvailableCar.setText("First Available Car");
        btnFirstAvailableCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstAvailableCarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnUpdateView.setBackground(new java.awt.Color(51, 51, 51));
        btnUpdateView.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnUpdateView.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateView.setText("Update Car");
        btnUpdateView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateViewActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(btnUpdateView, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(195, 195, 195)
                .addComponent(btnUpdateView, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(605, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnUpdateView)
                .addContainerGap(581, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 97, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 61, Short.MAX_VALUE)
        );

        lblPlatformUsedFilter.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblPlatformUsedFilter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPlatformUsedFilter.setText("Platform Used:");

        comboBoxPlatformUsed.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        comboBoxPlatformUsed.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Uber", "Lyft", "Ola", "All" }));
        comboBoxPlatformUsed.setSelectedIndex(-1);
        comboBoxPlatformUsed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxPlatformUsedActionPerformed(evt);
            }
        });

        lblLastUpdatedValue.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblLastUpdatedValue.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblLastUpdatedValue.setText("Last Updated On:");

        txtLastUpdatedValue.setBackground(new java.awt.Color(204, 204, 204));
        txtLastUpdatedValue.setText("                   ");
        txtLastUpdatedValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastUpdatedValueActionPerformed(evt);
            }
        });

        btnCarExpiredCertificateFilter.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnCarExpiredCertificateFilter.setText("List Expired Certificate");
        btnCarExpiredCertificateFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarExpiredCertificateFilterActionPerformed(evt);
            }
        });

        lblManufacturedBy.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblManufacturedBy.setText("Manufacturer:");

        lblLastUpdatedDate.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblLastUpdatedDate.setText("Last Updated Date:");

        txtModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNumberActionPerformed(evt);
            }
        });

        lblCityOfOperation.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblCityOfOperation.setText("City Of Operation:");

        lblCarAvailability.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblCarAvailability.setText("Car Availability:");

        lblManufacturedDate.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblManufacturedDate.setText("Manufactured Date:");

        chkboxAvailable.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        chkboxAvailable.setLabel("Is Available");

        lblModelNumber.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblModelNumber.setText("Model Number:");

        lblSeatCapacity.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblSeatCapacity.setText("Seat Capacity:");

        lblSerialNumber.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblSerialNumber.setText("Serial Number:");

        lblPlatformUsed.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblPlatformUsed.setText("Platform Used:");

        lblManufacturedByFilter.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblManufacturedByFilter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblManufacturedByFilter.setText("Manufactured By:");

        comboBoxManufacturedBy.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        comboBoxManufacturedBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Honda", "BMW", "Audi", "Tesla", "Suzuki", "Toyota", "All" }));
        comboBoxManufacturedBy.setSelectedIndex(-1);
        comboBoxManufacturedBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxManufacturedByActionPerformed(evt);
            }
        });

        txtUnavailableCarCount.setText("0");

        txtAvailableCarCount.setText("0");

        btnCarAvailability.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnCarAvailability.setText("Car Availability");
        btnCarAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarAvailabilityActionPerformed(evt);
            }
        });

        lblEngagedCarCount.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblEngagedCarCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEngagedCarCount.setText("Engaged Car Count:");

        lblAvailableCarCount.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblAvailableCarCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAvailableCarCount.setText("Available Car Count:");

        btnManufacturedYearSearch.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnManufacturedYearSearch.setText("Manufactured Year Search");
        btnManufacturedYearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManufacturedYearSearchActionPerformed(evt);
            }
        });

        lblMinimumSeatSelection.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblMinimumSeatSelection.setText("Min Seat:");

        comboBoxMaximumSeatCapacity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10", "11" }));
        comboBoxMaximumSeatCapacity.setSelectedIndex(9);
        comboBoxMaximumSeatCapacity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMaximumSeatCapacityActionPerformed(evt);
            }
        });

        lblSeatCapacityFilter.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblSeatCapacityFilter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSeatCapacityFilter.setText("Seat Capacity:");

        comboBoxMinimumSeatCapacity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        comboBoxMinimumSeatCapacity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMinimumSeatCapacityActionPerformed(evt);
            }
        });

        lblMaximumSeatSelection.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblMaximumSeatSelection.setText("Max Seat:");

        btnModelNumberSearch.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnModelNumberSearch.setText("Model Number Search");
        btnModelNumberSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelNumberSearchActionPerformed(evt);
            }
        });

        btnCitySearch.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnCitySearch.setText("City Of Operation Search");
        btnCitySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCitySearchActionPerformed(evt);
            }
        });

        btnSerialNumberSearch.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        btnSerialNumberSearch.setText("Serial Number Search");
        btnSerialNumberSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialNumberSearchActionPerformed(evt);
            }
        });

        lblMaintenanceCertExpDate.setFont(new java.awt.Font("Lucida Bright", 0, 11)); // NOI18N
        lblMaintenanceCertExpDate.setText("Maintenance Certificate Expiry Date:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1457, 1457, 1457)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblLastUpdatedValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnFirstAvailableCar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAllAvailableCars, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnViewCar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblManufacturedByFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPlatformUsedFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblSeatCapacityFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(txtLastUpdatedValue, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(64, 64, 64)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lblModelNumber)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(lblManufacturedBy)
                                                            .addComponent(lblSerialNumber)
                                                            .addComponent(lblSeatCapacity))))
                                                .addComponent(lblPlatformUsed, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblLastUpdatedDate, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblCarAvailability, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(comboBoxPlatformUsed, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(lblMinimumSeatSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(lblMaximumSeatSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(comboBoxMaximumSeatCapacity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(comboBoxMinimumSeatCapacity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                    .addGap(41, 41, 41)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lblManufacturedDate, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(lblCityOfOperation, javax.swing.GroupLayout.Alignment.TRAILING))))
                                            .addComponent(comboBoxManufacturedBy, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblMaintenanceCertExpDate, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(51, 51, 51)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSerialNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                                            .addComponent(txtManufacturedBy)
                                            .addComponent(txtManufacturedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtCityOfOperation, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtLastUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(chkboxAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSeatCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtPlatformUsed, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtMaintenanceCertExpDate, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDeleteCar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(137, 137, 137)
                                        .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(104, 104, 104)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnManufacturedYearSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnCarAvailability, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(lblEngagedCarCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblAvailableCarCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtAvailableCarCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtUnavailableCarCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(txtManufacturedYearSearch))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnCarExpiredCertificateFilter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnCitySearch, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                            .addComponent(btnModelNumberSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnSerialNumberSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtSerialNumberSearch)
                                            .addComponent(txtCityOfOperationSearch, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtModelNumberSearch)))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(341, 341, 341)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 692, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(477, 477, 477)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCityOfOperation, txtLastUpdated, txtMaintenanceCertExpDate, txtManufacturedBy, txtManufacturedDate, txtModelNumber, txtPlatformUsed, txtSeatCapacity, txtSerialNumber});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnViewCar)
                        .addComponent(btnDeleteCar))
                    .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCarAvailability)
                            .addComponent(lblAvailableCarCount)
                            .addComponent(txtAvailableCarCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEngagedCarCount)
                            .addComponent(txtUnavailableCarCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnManufacturedYearSearch)
                            .addComponent(txtManufacturedYearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnCarExpiredCertificateFilter)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnModelNumberSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtModelNumberSearch))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCitySearch)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(txtCityOfOperationSearch)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSerialNumberSearch)
                            .addComponent(txtSerialNumberSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblModelNumber)
                            .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSerialNumber)
                            .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblManufacturedBy)
                            .addComponent(txtManufacturedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSeatCapacity)
                            .addComponent(txtSeatCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtManufacturedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblManufacturedDate))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCityOfOperation)
                            .addComponent(txtCityOfOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPlatformUsed)
                            .addComponent(txtPlatformUsed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLastUpdatedDate)
                            .addComponent(txtLastUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chkboxAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCarAvailability, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaintenanceCertExpDate)
                            .addComponent(txtMaintenanceCertExpDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnFirstAvailableCar)
                        .addGap(18, 18, 18)
                        .addComponent(btnAllAvailableCars)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLastUpdatedValue)
                            .addComponent(txtLastUpdatedValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblManufacturedByFilter)
                            .addComponent(comboBoxManufacturedBy))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxPlatformUsed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPlatformUsedFilter))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSeatCapacityFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMinimumSeatSelection)
                            .addComponent(comboBoxMinimumSeatCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaximumSeatSelection)
                            .addComponent(comboBoxMaximumSeatCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(111, 111, 111)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(981, 981, 981))
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtCityOfOperation, txtLastUpdated, txtMaintenanceCertExpDate, txtManufacturedBy, txtManufacturedDate, txtModelNumber, txtPlatformUsed, txtSeatCapacity, txtSerialNumber});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtCityOfOperationSearch, txtSerialNumberSearch});

    }// </editor-fold>//GEN-END:initComponents

    private void txtModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNumberActionPerformed

    private void btnDeleteCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCarActionPerformed
        int selectedRowIndex = tblViewCarDetails.getSelectedRow();
        
        if(selectedRowIndex < 0) {  
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        Car selectedCar = (Car) model.getValueAt(selectedRowIndex, 0);
        
        carFleetDetails.removeCar(selectedCar);
        JOptionPane.showMessageDialog(this, "Car record deleted successfully!");
        
        populateTable();
    }//GEN-LAST:event_btnDeleteCarActionPerformed

    private void btnViewCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCarActionPerformed
        int selectedRowIndex = tblViewCarDetails.getSelectedRow();
        
        if(selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        Car selectedCar = (Car) model.getValueAt(selectedRowIndex, 0);
        
        txtModelNumber.setText(String.valueOf(selectedCar.getModelNumber()));
        txtSerialNumber.setText(String.valueOf(selectedCar.getSerialNumber()));
        txtManufacturedBy.setText(selectedCar.getManufacturer());
        txtSeatCapacity.setText(String.valueOf(selectedCar.getSeatCapacity()));
        txtPlatformUsed.setText(selectedCar.getPlatformUsed());
        txtManufacturedDate.setText(String.valueOf(selectedCar.getManufacturedDate()));
        txtMaintenanceCertExpDate.setText(String.valueOf(selectedCar.getMaintenanceCertExpDate()));
        txtCityOfOperation.setText(selectedCar.getCity());
        chkboxAvailable.setState(selectedCar.isIsAvailable());
        txtLastUpdated.setText(String.valueOf(selectedCar.getLastUpdated()));     
    }//GEN-LAST:event_btnViewCarActionPerformed

    private void btnAllAvailableCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllAvailableCarsActionPerformed
        String isAvailable = "true";
        populateTableAvailable(isAvailable);       
    }//GEN-LAST:event_btnAllAvailableCarsActionPerformed

    private void comboBoxManufacturedByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxManufacturedByActionPerformed
        populateTable();
    }//GEN-LAST:event_comboBoxManufacturedByActionPerformed

    private void btnFirstAvailableCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstAvailableCarActionPerformed
        String isAvailable = "true";
        populateTableFirstAvailable();
    }//GEN-LAST:event_btnFirstAvailableCarActionPerformed

    private void btnCarAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarAvailabilityActionPerformed
        int countTotalCar = 0;
        int carUnavailableCount = 0;
        int carAvailableCount = 0;

        for(Car c: carFleetDetails.getCarFleetDetails()) {
                countTotalCar++;    
            if (c.isIsAvailable() == true) {
                carAvailableCount++;
            }
        }      
            carUnavailableCount = (countTotalCar)-(carAvailableCount);
            txtUnavailableCarCount.setText(String.valueOf(carUnavailableCount));
            txtAvailableCarCount.setText(String.valueOf(carAvailableCount));
    }//GEN-LAST:event_btnCarAvailabilityActionPerformed

    private void btnManufacturedYearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManufacturedYearSearchActionPerformed
        populateTableManufacturedYear();
    }//GEN-LAST:event_btnManufacturedYearSearchActionPerformed

    private void comboBoxMinimumSeatCapacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMinimumSeatCapacityActionPerformed

        Object numberMinimumCapacity = comboBoxMinimumSeatCapacity.getSelectedItem();
        int numberMinimumCapacityInteger = Integer.parseInt(numberMinimumCapacity.toString());
        
        comboBoxMaximumSeatCapacity.removeAllItems();
        for (int a=numberMinimumCapacityInteger; a<=10; a++) {
            String newcountMinCapacityInt = String.valueOf(a+1);
            comboBoxMaximumSeatCapacity.addItem(newcountMinCapacityInt);
        }
        populateSeatCapacityFilterTable();
    }//GEN-LAST:event_comboBoxMinimumSeatCapacityActionPerformed

    private void comboBoxMaximumSeatCapacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMaximumSeatCapacityActionPerformed
        populateSeatCapacityFilterTable();
    }//GEN-LAST:event_comboBoxMaximumSeatCapacityActionPerformed

    private void btnSerialNumberSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialNumberSearchActionPerformed
        populateTableSerialNumberFilter();
    }//GEN-LAST:event_btnSerialNumberSearchActionPerformed

    private void btnModelNumberSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelNumberSearchActionPerformed
        populateTableModelNumberFilter();
    }//GEN-LAST:event_btnModelNumberSearchActionPerformed

    private void comboBoxPlatformUsedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxPlatformUsedActionPerformed
        populateTablePlatformUsed();
    }//GEN-LAST:event_comboBoxPlatformUsedActionPerformed

    private void txtLastUpdatedValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastUpdatedValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastUpdatedValueActionPerformed

    private void btnCitySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCitySearchActionPerformed
        populateTableCityOfOperationFilter();
    }//GEN-LAST:event_btnCitySearchActionPerformed

    private void btnCarExpiredCertificateFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarExpiredCertificateFilterActionPerformed
        populateTableMaintenanceCertificateExpiredFilter();
    }//GEN-LAST:event_btnCarExpiredCertificateFilterActionPerformed

    private void btnUpdateViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateViewActionPerformed
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_btnUpdateViewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllAvailableCars;
    private javax.swing.JButton btnCarAvailability;
    private javax.swing.JButton btnCarExpiredCertificateFilter;
    private javax.swing.JButton btnCitySearch;
    private javax.swing.JButton btnDeleteCar;
    private javax.swing.JButton btnFirstAvailableCar;
    private javax.swing.JButton btnManufacturedYearSearch;
    private javax.swing.JButton btnModelNumberSearch;
    private javax.swing.JButton btnSerialNumberSearch;
    private javax.swing.JButton btnUpdateView;
    private javax.swing.JButton btnViewCar;
    private java.awt.Checkbox chkboxAvailable;
    private javax.swing.JComboBox<String> comboBoxManufacturedBy;
    private javax.swing.JComboBox<String> comboBoxMaximumSeatCapacity;
    private javax.swing.JComboBox<String> comboBoxMinimumSeatCapacity;
    private javax.swing.JComboBox<String> comboBoxPlatformUsed;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAvailableCarCount;
    private javax.swing.JLabel lblCarAvailability;
    private javax.swing.JLabel lblCityOfOperation;
    private javax.swing.JLabel lblEngagedCarCount;
    private javax.swing.JLabel lblLastUpdatedDate;
    private javax.swing.JLabel lblLastUpdatedValue;
    private javax.swing.JLabel lblMaintenanceCertExpDate;
    private javax.swing.JLabel lblManufacturedBy;
    private javax.swing.JLabel lblManufacturedByFilter;
    private javax.swing.JLabel lblManufacturedDate;
    private javax.swing.JLabel lblMaximumSeatSelection;
    private javax.swing.JLabel lblMinimumSeatSelection;
    private javax.swing.JLabel lblModelNumber;
    private javax.swing.JLabel lblPlatformUsed;
    private javax.swing.JLabel lblPlatformUsedFilter;
    private javax.swing.JLabel lblSeatCapacity;
    private javax.swing.JLabel lblSeatCapacityFilter;
    private javax.swing.JLabel lblSerialNumber;
    private javax.swing.JTable tblViewCarDetails;
    private javax.swing.JTextField txtAvailableCarCount;
    private javax.swing.JTextField txtCityOfOperation;
    private javax.swing.JTextField txtCityOfOperationSearch;
    private javax.swing.JTextField txtLastUpdated;
    private javax.swing.JTextField txtLastUpdatedValue;
    private javax.swing.JTextField txtMaintenanceCertExpDate;
    private javax.swing.JTextField txtManufacturedBy;
    private javax.swing.JTextField txtManufacturedDate;
    private javax.swing.JTextField txtManufacturedYearSearch;
    private javax.swing.JTextField txtModelNumber;
    private javax.swing.JTextField txtModelNumberSearch;
    private javax.swing.JTextField txtPlatformUsed;
    private javax.swing.JTextField txtSeatCapacity;
    private javax.swing.JTextField txtSerialNumber;
    private javax.swing.JTextField txtSerialNumberSearch;
    private javax.swing.JTextField txtUnavailableCarCount;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        
        Object selectedManufacturer = comboBoxManufacturedBy.getSelectedItem();
        ArrayList<LocalDate> allUpdates = new ArrayList<LocalDate>();
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            if (selectedManufacturer != null && selectedManufacturer.equals(c.getManufacturer())) {
            Object [] row = new Object[9];
            row[0] = c;
            row[1] = c.getSerialNumber();
            row[2] = c.getManufacturer();
            row[3] = c.getManufacturedDate();
            row[4] = c.getSeatCapacity();
            row[5] = c.isIsAvailable();
            row[6] = c.getCity();
            row[7] = c.getPlatformUsed();
            row[8] = c.getMaintenanceCertExpDate();
            
            model.addRow(row); 
            } else if(selectedManufacturer == null || selectedManufacturer == "All") {
            Object [] row = new Object[9];
            row[0] = c;
            row[1] = c.getSerialNumber();
            row[2] = c.getManufacturer();
            row[3] = c.getManufacturedDate();
            row[4] = c.getSeatCapacity();
            row[5] = c.isIsAvailable();
            row[6] = c.getCity();
            row[7] = c.getPlatformUsed();
            row[8] = c.getMaintenanceCertExpDate();
            
            model.addRow(row); 
            }
        }
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            allUpdates.add(c.getLastUpdated());
        }
        
        if (!allUpdates.isEmpty()) {
                   LocalDate maxDate = allUpdates.get(0); 

        for (int i = 1; i < allUpdates.size()-1; i++) { 
                if (allUpdates.get(i).isAfter(maxDate)) { 
                        maxDate = allUpdates.get(i); 
                } 
        }
        //txtLastUpdatedValue.setText(String.valueOf(maxDate)); 
        txtLastUpdatedValue.setEditable(false);
        }
        
    }
    
    private void populateTablePlatformUsed() {
        
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        
        Object selectedPlatformUsed = comboBoxPlatformUsed.getSelectedItem();
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            if (selectedPlatformUsed!= null && selectedPlatformUsed.equals(c.getPlatformUsed())) {
                
                Object [] row = new Object[9];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getPlatformUsed();
                row[8] = c.getMaintenanceCertExpDate();
                model.addRow(row); 
            } 
            else if(selectedPlatformUsed == null || selectedPlatformUsed == "All") {
                
                Object [] row = new Object[9];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getPlatformUsed();
                row[8] = c.getMaintenanceCertExpDate();
                model.addRow(row); 
            }
        }
        
    }
    
    private void populateTableAvailable(String isAvailable) {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            
            if(c.isIsAvailable() == true) {
            Object [] row = new Object[9];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getPlatformUsed();
                row[8] = c.getMaintenanceCertExpDate();
                model.addRow(row);
            }
        }
        
    }
    
    private void populateTableFirstAvailable() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            
            if(c.isIsAvailable() == true) {
                Object [] row = new Object[9];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getPlatformUsed();
                row[8] = c.getMaintenanceCertExpDate();
                if (model.getRowCount() == 0) {
                    model.addRow(row);
                }
            }
        }
        
    }

    private void populateTableManufacturedYear() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        int manufacturedYear = Integer.parseInt(txtManufacturedYearSearch.getText());
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            int manuYear = c.getManufacturedDate().getYear();
            
            if(manuYear == manufacturedYear) {
                Object [] row = new Object[9];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getPlatformUsed();
                row[8] = c.getMaintenanceCertExpDate();
                model.addRow(row);
            }
        }
    }

    private void populateSeatCapacityFilterTable() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        
        Object selectedMinCapacity = comboBoxMinimumSeatCapacity.getSelectedItem();
        Object selectedMaxCapacity = comboBoxMaximumSeatCapacity.getSelectedItem();
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            int countMinCapacityInt = Integer.parseInt(selectedMinCapacity.toString());
            int countMaxCapacityInt = 11;
            if(comboBoxMaximumSeatCapacity.getSelectedItem() != null) {
               countMaxCapacityInt = Integer.parseInt(selectedMaxCapacity.toString()); 
            }
            if (c.getSeatCapacity() <= countMaxCapacityInt && c.getSeatCapacity() >= countMinCapacityInt) {
            Object [] row = new Object[9];
            row[0] = c;
            row[1] = c.getSerialNumber();
            row[2] = c.getManufacturer();
            row[3] = c.getManufacturedDate();
            row[4] = c.getSeatCapacity();
            row[5] = c.isIsAvailable();
            row[6] = c.getCity();
            row[7] = c.getPlatformUsed();
            row[8] = c.getMaintenanceCertExpDate();
            model.addRow(row); 
            } 
        }
        
    }

    private void populateTableSerialNumberFilter() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        int serialNumber = Integer.parseInt(txtSerialNumberSearch.getText());
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            int seriNum = c.getSerialNumber();
            
            if(seriNum == serialNumber) {
                Object [] row = new Object[9];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getPlatformUsed();
                row[8] = c.getMaintenanceCertExpDate();
                model.addRow(row);
            }
        }
    }
    
    private void populateTableModelNumberFilter() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        int modelNumber = Integer.parseInt(txtModelNumberSearch.getText());
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            int modelNum = c.getModelNumber();
            
            if(modelNum == modelNumber) {
                Object [] row = new Object[9];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getPlatformUsed();
                row[8] = c.getMaintenanceCertExpDate();
                model.addRow(row);
            }
        }
    }

    private void populateTableCityOfOperationFilter() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        String typeCity = txtCityOfOperationSearch.getText();
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            String city = c.getCity();
            
            if(city.equals(typeCity) ) {
                Object [] row = new Object[9];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getPlatformUsed();
                row[8] = c.getMaintenanceCertExpDate();
                model.addRow(row);
            }
        }
    }

    private void populateTableMaintenanceCertificateExpiredFilter() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarDetails.getModel();
        model.setRowCount(0);
        LocalDate lt = LocalDate.now();
        
        for(Car c: carFleetDetails.getCarFleetDetails()) {
            LocalDate expiry = c.getMaintenanceCertExpDate();
            
                if(expiry.isBefore(lt)) {
                Object [] row = new Object[9];
                row[0] = c;
                row[1] = c.getSerialNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.isIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getPlatformUsed();
                row[8] = c.getMaintenanceCertExpDate();
                model.addRow(row);
            }
        }
    }

    private void update() {
        int SerialNo = Integer.parseInt(txtSerialNumber.getText()) ;
        
        for (Car c: carFleetDetails.getCarFleetDetails()) {
            
            if (!txtSerialNumber.getText().isEmpty() && c.getSerialNumber()== SerialNo) {
                
                boolean available = chkboxAvailable.getState();
                LocalDate todaysDate = LocalDate.now();

                DateTimeFormatter dateformat = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                LocalDate localDate = LocalDate.parse(txtManufacturedDate.getText(), dateformat);
                LocalDate manufacturedDate = localDate;
                LocalDate localDateCerExp = LocalDate.parse(txtMaintenanceCertExpDate.getText(), dateformat);
                
                //Object viewUsedByApp = comboBoxUsedByApp.getSelectedItem();
                String usedBy = txtPlatformUsed.getText();
               
                // Object viewManufacturedBy = comboBoxCarManufacturer.getSelectedItem();
                String manufacturedBy = txtManufacturedBy.getText();
                
                c.setModelNumber(Integer.parseInt(txtModelNumber.getText()));
                c.setManufacturedDate(manufacturedDate);
                c.setSeatCapacity(Integer.parseInt(txtSeatCapacity.getText()));
                c.setCity(txtCityOfOperation.getText());
                c.setPlatformUsed(usedBy);
                c.setManufacturer(manufacturedBy);
                c.setMaintenanceCertExpDate(localDateCerExp);
                c.setLastUpdated(todaysDate);
                c.setIsAvailable(available);
            }
        }
        populateTable();

    }
}
